@Library('shared-lib') _
 
pipeline {
    agent {
        kubernetes {
            cloud 'kubernetes'
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: docker
                image: saltycrane/aws-cli-and-docker:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              - name: aws-cli
                image: saltycrane/aws-cli-and-docker:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
              - name: docker-sock
                hostPath:
                  path: /var/run/docker.sock
            """
        }
    }
 
    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO = '853973692277.dkr.ecr.us-east-1.amazonaws.com'
        DOCKER_IMAGE = 'manibharathi/nginx'
        DOCKER_TAG = 'latest'
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_SESSION_TOKEN = credentials('aws-session-token')
    }

    stages {
        stage('Prepare Dockerfile') {
            steps {
                script {
                    writeFile file: 'Dockerfile', text: """
                    # Use the official Nginx image from the Docker Hub
                    FROM nginx:latest
 
                    # Expose port 80 to the outside world
                    EXPOSE 80
 
                    # Start Nginx when the container launches
                    CMD ["nginx", "-g", "daemon off;"]
                    """
                }
            }
        }
        
        stage('Login to ECR') {
            steps {
                container('aws-cli') {
 
 
                    script {
                        loginToECR(
                            awsRegion: env.AWS_REGION,
                            ecrRepo: env.ECR_REPO,
                        )
 
                        buildDockerImage(
                            dockerImage: env.DOCKER_IMAGE,
                            dockerTag: env.DOCKER_TAG
                        )
 
                        tagDockerImage(
                            dockerImage: env.DOCKER_IMAGE,
                            dockerTag: env.DOCKER_TAG,
                            ecrRepo: env.ECR_REPO
                        )
                  
                        pushDockerImage(
                            dockerImage: env.DOCKER_IMAGE,
                            dockerTag: env.DOCKER_TAG,
                            ecrRepo: env.ECR_REPO
                        )
                    }
                }
            }
        }
    }
}
